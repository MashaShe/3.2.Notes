data class Comment (
    var id: Int=0, // идентификатор комментария.
    var ifDeleted: Boolean = false, //флаг удален ли комментарий
    val noteId: Int =0, // идентификатор  заметки, к которой добавлен комментарий
    val ownerId: Int=0, // идентификатор автора комментария.
    val replyTo: Int=0,//идентификатор пользователя, ответом на комментарий которого является добавляемый комментарий (не передаётся, если комментарий не является ответом).
    val date: Int=0, //	дата создания комментария в формате Unixtime.
    val messageText: String =" ", // текст комментария.
    val guid: String =" "//уникальный идентификатор, предназначенный для предотвращения повторной отправки одинакового комментария.
   // val donut: Donut? = null, // object	информация о VK Donut. Объект со следующими полями:
    // is_don (boolean) — является ли комментатор подписчиком VK Donut.
    //placeholder (string) — заглушка для пользователей, которые не оформили подписку VK Donut.
   // val replyToUser: Int =0, //идентификатор пользователя или сообщества, в ответ которому оставлен текущий комментарий (если применимо).
   // val replyToComment: Int =0, // идентификатор комментария, в ответ на который оставлен текущий (если применимо).
   // val parentsStack: Array<Int>? = null, // массив идентификаторов родительских комментариев.
    //val thread: CommentThread?=null //Информация о вложенной ветке комментариев
)


//data class CommentThread (
//    val count: Int =0, // количество комментариев в ветке.
//    val items: Array<Comment>? = null,// массив объектов комментариев к записи (только для метода wall.getComments).
//    val canPost: Boolean = true, // – может ли текущий пользователь оставлять комментарии в этой ветке.
//    val showReplyButton: Boolean = true, //нужно ли отображать кнопку «ответить» в ветке.
//    val groupsCanPost: Boolean = false//могут ли сообщества оставлять комментарии в ветке.
//)

